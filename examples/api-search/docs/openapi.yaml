openapi: 3.0.3
info:
  title: Example API
  description: |
    Example API demonstrating common patterns and documentation.
    
    ## Authentication
    
    This API uses Bearer token authentication. Include the token in the Authorization header:
    ```http
    Authorization: Bearer your-token-here
    ```
    
    Get your API token from the developer dashboard.
    
    ## Rate Limiting
    
    Requests are limited to:
    - 1000 requests per hour for authenticated users
    - 100 requests per hour for unauthenticated users
    
    Rate limit headers are included in all responses.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://api-staging.example.com/v1
    description: Staging server

security:
  - bearerAuth: []

paths:
  /users:
    get:
      summary: List users
      description: |
        Retrieve a list of users. Results are paginated.
        
        ### Pagination
        Use `page` and `per_page` parameters to control pagination.
        Response includes `Link` headers for navigation.
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
            maximum: 100
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of users
              example:
                users:
                  - id: 1
                    username: "john_doe"
                    email: "john@example.com"
                    created_at: "2023-01-01T12:00:00Z"
                total: 42
        '429':
          $ref: '#/components/responses/TooManyRequests'
    
    post:
      summary: Create user
      description: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
            example:
              username: "jane_doe"
              email: "jane@example.com"
              password: "secure123!"
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username or email already exists

  /users/{userId}:
    get:
      summary: Get user
      description: Retrieve a specific user by ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the authentication endpoint.
        Include the token in the Authorization header:
        ```http
        Authorization: Bearer your-token-here
        ```

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user ID
        username:
          type: string
          description: Unique username
        email:
          type: string
          format: email
          description: User's email address
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp

    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "VALIDATION_ERROR"
            message: "Invalid request parameters"
            details:
              field: "email"
              error: "Invalid email format"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Resource not found"

    TooManyRequests:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Rate limit ceiling
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time until limit reset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "RATE_LIMIT_EXCEEDED"
            message: "Too many requests"
            details:
              reset_at: "2023-01-01T12:00:00Z"
